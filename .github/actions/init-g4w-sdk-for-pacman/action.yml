name: 'Initialize Git for Windows SDK subset to run `pacman`'
description: 'This composite GitHub Action initializes a subset of the Git for Windows SDK intended to run `pacman` and friends'
inputs:
  include-makepkg:
    description: 'Whether to include a working `makepkg`'
    required: false
    default: 'false'
  include-repo-add:
    description: 'Whether to include a working `repo-add`'
    required: false
    default: 'false'
  git-sdk-64-owner:
    description: 'The owner of the git-sdk-64 repository to use'
    required: false
outputs:
  result:
    description: 'The path to the subset of the SDK'
    value: '${{ steps.use-sdk.outputs.result }}'
runs:
  using: 'composite'
  steps:
    - name: initialize bare SDK clone
      id: clone-g4w-sdk
      shell: bash
      run: |
        git clone --bare --depth=1 --single-branch --branch=main --filter=blob:none \
          https://github.com/${{ inputs.git-sdk-64-owner }}/git-sdk-64 .tmp &&
        rev="$(git -C .tmp rev-parse HEAD)" &&
        echo "rev=$rev" >>$GITHUB_OUTPUT &&
        echo "cache-key=g4w-sdk-$rev${{ inputs.include-makepkg != 'false' && '+makepkg' || '' }}${{ inputs.include-repo-add != 'false' && '+repo-add' || '' }}" >>$GITHUB_OUTPUT
    - name: restore cached git-sdk-64 subset
      id: restore-g4w-sdk
      uses: actions/cache/restore@v4
      env:
        cache-name: cache-g4w-sdk
      with:
        path: .sdk
        key: ${{ steps.clone-g4w-sdk.outputs.cache-key }}
    - name: check out git-sdk-64 subset
      if: ${{ steps.restore-g4w-sdk.outputs.cache-hit != 'true' }}
      shell: bash
      env:
        GIT_CONFIG_PARAMETERS: "'checkout.workers=56'"
      run: |
        git -C .tmp config extensions.worktreeConfig true &&
        git -C .tmp worktree add --no-checkout --detach "$PWD/.sdk" &&
        cd .sdk &&
        git config --worktree core.sparseCheckout true &&
        git config --worktree core.bare false &&
        sparse="$(git rev-parse --git-path info/sparse-checkout)" &&
        mkdir -p "${sparse%/*}" &&
        git show HEAD:.sparse/minimal-sdk >"$sparse" &&
        cat >>"$sparse" <<-EOF &&
        /etc/makepkg.conf
        /usr/bin/base64.exe
        /usr/bin/gettext.exe
        /usr/bin/makepkg
        /usr/bin/nproc.exe
        /usr/bin/pacman.exe
        /usr/bin/sha256sum.exe
        /usr/bin/updpkgsums
        /usr/share/makepkg/
        /mingw64/bin/curl.exe
        EOF
        if test false != '${{ inputs.include-makepkg }}'
        then
          printf "%s\n" >>"$sparse" \
            /etc/pacman.conf \
            /etc/pacman.d/ \
            /var/lib/pacman/ \
            /usr/bin/gpg.exe &&
          # cheap `objdump -p | grep DLL.Name:` alternative
          LC_CTYPE=C sed -n '
            # surround MSYS DLL names with `<` and `>` and avoid false positives
            s|[<>]||g
            s|\(msys-[-a-z0-9.]*\.dll\)|<\1>|g

            # remove everything except the MSYS DLL names
            s|^[^<]*<*||
            s|>*[^>]*$||
            s|>[^<>]*<|\n|g

            # skip empty lines
            /^$/d

            # prefix the MSYS DLL names with `/usr/bin/`
            s|^|/usr/bin/|
            s|\n|&/usr/bin/|g

            # print the result
            p' /usr/bin/gpg.exe >>"$sparse"
        fi &&
        if test false != '${{ inputs.include-repo-add }}'
        then
          printf "%s\n" >>"$sparse" \
            /usr/lib/gnupg/keyboxd.exe \
            /usr/bin/msys-ksba-[0-9]*.dll \
            /usr/bin/gpg-agent.exe \
            /usr/bin/repo-add \
            /usr/bin/xz.exe \
            /usr/bin/msys-lzma-[0-9]*.dll \
            /usr/bin/bsdtar.exe \
            /usr/bin/msys-crypto-[0-9]*.dll \
            /usr/bin/msys-lz4-[0-9]*.dll \
            /usr/bin/msys-zstd-[0-9]*.dll \
            /usr/bin/msys-expat-[0-9]*.dll \
            /usr/bin/vercmp.exe
        fi &&
        git checkout -- &&

        # makepkg/updpkgsums expect `curl` to be present in `/usr/bin/`
        printf '#!/bin/sh\n\nexec /mingw64/bin/curl.exe "$@"' >usr/bin/curl &&
        {
          # makepkg expects `git` to be present in `/usr/bin/`
          test ! -x mingw64/bin/git.exe ||
          printf '#!/bin/sh\n\nexec /mingw64/bin/git.exe "$@"' >usr/bin/git
        }
    - name: cache git-sdk-64 subset
      if: ${{ steps.restore-g4w-sdk.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      env:
        cache-name: cache-g4w-sdk
      with:
        path: .sdk
        key: ${{ steps.clone-g4w-sdk.outputs.cache-key }}
    - name: use git-sdk-64 subset
      id: use-sdk
      shell: bash
      run: |
        cd .sdk &&

        echo "result=$(cygpath -aw .)" >>$GITHUB_OUTPUT &&

        # add the SDK directories to the `PATH`
        cygpath -aw "usr/bin/core_perl" >>$GITHUB_PATH &&
        cygpath -aw "usr/bin" >>$GITHUB_PATH &&
        cygpath -aw "mingw64/bin" >>$GITHUB_PATH &&
        echo "MSYSTEM=MINGW64" >>$GITHUB_ENV
